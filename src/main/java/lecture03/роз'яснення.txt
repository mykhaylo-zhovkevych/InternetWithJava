Key Concepts and Components of HTTP
1. HTTP Methods (Verbs)
GET: Requests data from a specified resource. Should be idempotent (multiple identical requests should have the same effect as a single request).
POST: Submits data to be processed to a specified resource. Often used for form submissions.
PUT: Updates or creates a resource with the provided data. Should be idempotent.
DELETE: Deletes the specified resource. Should be idempotent.
HEAD: Similar to GET, but it transfers the status line and header section only.
OPTIONS: Describes the communication options for the target resource.
PATCH: Partially updates a resource.
2. HTTP Status Codes
1xx (Informational): Request received, continuing process.
100 Continue
2xx (Successful): The action was successfully received, understood, and accepted.
200 OK
201 Created
204 No Content
3xx (Redirection): Further action must be taken to complete the request.
301 Moved Permanently
302 Found
304 Not Modified
4xx (Client Error): The request contains bad syntax or cannot be fulfilled.
400 Bad Request
401 Unauthorized
403 Forbidden
404 Not Found
5xx (Server Error): The server failed to fulfill an apparently valid request.
500 Internal Server Error
502 Bad Gateway
503 Service Unavailable
3. HTTP Headers
Request Headers: Sent by the client to provide more information about the request or the client itself.
Host: The domain name of the server (for virtual hosting), and the TCP port number on which the server is listening.
User-Agent: Information about the user agent (browser) making the request.
Accept: Content-Types that are acceptable for the response.
Authorization: Credentials for authenticating the client with the server.
Response Headers: Sent by the server to provide more information about the response or the server itself.
Content-Type: The MIME type of the response body.
Set-Cookie: Used to send cookies from the server to the client.
Location: Used in redirection or when a new resource has been created.
4. Message Body
Request Body: Data sent by the client to the server, typically used with POST or PUT requests.
Response Body: Data sent by the server to the client, containing the requested resource.
HTTP/1.1 vs HTTP/2 vs HTTP/3
HTTP/1.1
Persistent Connections: Connections are reused to fetch multiple resources, reducing the overhead of establishing connections.
Chunked Transfer Encoding: Allows data to be sent in chunks, useful for dynamically generated content.
HTTP/2
Binary Protocol: Uses binary format instead of text, which makes it more efficient.
Multiplexing: Multiple requests and responses can be in flight simultaneously over a single connection.
Header Compression: Reduces overhead by compressing headers.
Server Push: Allows servers to send resources proactively to the client.
HTTP/3
Based on QUIC: Uses UDP instead of TCP, providing lower latency and better performance over unreliable networks.
Improved Multiplexing and Connection Management: Reduces head-of-line blocking and handles packet loss more gracefully.



HTTP and TCP
HTTP primarily uses TCP (Transmission Control Protocol) as its transport layer protocol for the following reasons:

Reliability: TCP ensures that data packets are delivered reliably and in the correct order. This is crucial for web pages where missing or out-of-order data can break the content.
Connection-Oriented: TCP establishes a connection between the client and server before any data is exchanged. This connection remains open until the communication is complete, ensuring a consistent and stable communication channel.
Flow Control and Congestion Control: TCP manages the rate of data transmission based on the network's capacity, preventing network congestion and ensuring smooth data transfer.
TCP in HTTP
HTTP/1.1: Uses persistent connections by default. This means that a single TCP connection can be reused for multiple HTTP requests/responses, reducing the overhead of establishing a new connection for each request.
HTTP/2: Introduces multiplexing over a single TCP connection, allowing multiple streams of data to be sent concurrently over the same connection, reducing latency and improving performance.
HTTP and UDP
While HTTP is traditionally built on TCP, some modern applications (like HTTP/3) are exploring the use of UDP (User Datagram Protocol) due to its lower latency and different operational characteristics.

HTTP/3 and QUIC: HTTP/3 is built on top of QUIC, which uses UDP instead of TCP.
Lower Latency: UDP allows faster data transmission because it does not require the overhead of establishing a connection like TCP.
Resilience to Packet Loss: QUIC handles packet loss more efficiently than TCP, reducing the impact of lost packets on the overall data transmission.
Stream Multiplexing: Like HTTP/2, QUIC supports multiplexing, but without the head-of-line blocking issue that TCP has.
Comparison: TCP vs. UDP in HTTP
TCP (HTTP/1.1 and HTTP/2)
Connection-Oriented: Establishes a connection before data transmission.
Reliable: Ensures all data packets arrive correctly and in order.
Flow Control: Adjusts the transmission rate based on network conditions.
Congestion Control: Manages network traffic to prevent congestion.
Overhead: Higher due to connection management and reliability features.
UDP (HTTP/3 with QUIC)
Connectionless: No need to establish a connection before data transmission.
Lower Latency: Faster data transmission as there is no connection setup overhead.
Unreliable: Does not guarantee the delivery or order of packets (handled by QUIC).
No Flow Control: UDP itself does not manage the transmission rate.
No Congestion Control: UDP itself does not manage network congestion (handled by QUIC).
Efficiency: Lower overhead, making it suitable for real-time applications and high-performance needs.
Detailed Explanation of HTTP Types
HTTP/1.1
Persistent Connections: Reuses the same TCP connection for multiple requests/responses, reducing latency.
Chunked Transfer Encoding: Allows data to be sent in chunks, which is useful for dynamically generated content.
Keep-Alive: Maintains the connection open for a specified period, allowing multiple requests/responses without reconnecting.
HTTP/2
Binary Protocol: Uses a binary format instead of text, making it more efficient to parse and transmit.
Multiplexing: Multiple requests and responses can be sent simultaneously over a single connection.
Header Compression: Reduces the overhead of HTTP headers using HPACK compression.
Server Push: Allows the server to send resources to the client proactively.
HTTP/3
Built on QUIC (UDP): Uses UDP as the transport layer, providing faster connection setup and better performance over unreliable networks.
Improved Multiplexing: Like HTTP/2, supports multiple streams over a single connection but without the head-of-line blocking.
Enhanced Security: QUIC integrates security features similar to TLS/SSL, providing encrypted communication by default.


